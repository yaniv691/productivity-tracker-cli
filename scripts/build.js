#!/usr/bin/env node

const { execSync, exec } = require('child_process');
const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');

console.log(chalk.blue.bold('üöÄ Starting Comprehensive Build Process'));
console.log(chalk.gray('=' .repeat(60)));

const startTime = Date.now();

// Configuration
const config = {
  srcDir: 'src',
  outDir: 'dist',
  tempDir: '.build-temp',
  logLevel: 'verbose',
  parallel: false,
  optimization: true,
  sourceMaps: true,
  declarations: true
};

console.log(chalk.cyan('üìã Build Configuration:'));
console.log(JSON.stringify(config, null, 2));
console.log('');

// Step 1: Environment Setup
console.log(chalk.yellow.bold('üîß Step 1: Environment Setup and Validation'));
console.log('  ‚îú‚îÄ‚îÄ Checking Node.js version...');
const nodeVersion = process.version;
console.log(`  ‚îÇ   ‚úì Node.js: ${nodeVersion}`);

console.log('  ‚îú‚îÄ‚îÄ Checking npm version...');
try {
  const npmVersion = execSync('npm --version', { encoding: 'utf8' }).trim();
  console.log(`  ‚îÇ   ‚úì npm: v${npmVersion}`);
} catch (error) {
  console.log(`  ‚îÇ   ‚ùå npm version check failed: ${error.message}`);
}

console.log('  ‚îú‚îÄ‚îÄ Verifying TypeScript installation...');
try {
  const tscVersion = execSync('npx tsc --version', { encoding: 'utf8' }).trim();
  console.log(`  ‚îÇ   ‚úì ${tscVersion}`);
} catch (error) {
  console.log(`  ‚îÇ   ‚ùå TypeScript not found: ${error.message}`);
}

console.log('  ‚îú‚îÄ‚îÄ Checking available memory...');
const memUsage = process.memoryUsage();
console.log(`  ‚îÇ   ‚úì Memory usage: ${(memUsage.heapUsed / 1024 / 1024).toFixed(2)} MB`);

console.log('  ‚îî‚îÄ‚îÄ Environment setup complete');
console.log('');

// Step 2: Clean Previous Build
console.log(chalk.yellow.bold('üßπ Step 2: Cleaning Previous Build Artifacts'));
const dirsToClean = ['dist', '.build-temp', 'coverage', '.nyc_output'];

for (const dir of dirsToClean) {
  console.log(`  ‚îú‚îÄ‚îÄ Removing ${dir}/...`);
  try {
    await fs.remove(dir);
    console.log(`  ‚îÇ   ‚úì Cleaned ${dir}/`);
  } catch (error) {
    console.log(`  ‚îÇ   ‚ö†Ô∏è  ${dir}/ not found or already clean`);
  }
}

console.log('  ‚îî‚îÄ‚îÄ Cleanup complete');
console.log('');

// Step 3: Dependency Analysis
console.log(chalk.yellow.bold('üì¶ Step 3: Analyzing Dependencies'));
console.log('  ‚îú‚îÄ‚îÄ Reading package.json...');

try {
  const packageJson = await fs.readJson('package.json');
  const deps = Object.keys(packageJson.dependencies || {});
  const devDeps = Object.keys(packageJson.devDependencies || {});
  
  console.log(`  ‚îÇ   ‚úì Found ${deps.length} production dependencies`);
  console.log(`  ‚îÇ   ‚úì Found ${devDeps.length} development dependencies`);
  
  console.log('  ‚îú‚îÄ‚îÄ Production dependencies:');
  deps.forEach(dep => {
    console.log(`  ‚îÇ   ‚Ä¢ ${dep}`);
  });
  
  console.log('  ‚îú‚îÄ‚îÄ Development dependencies:');
  devDeps.slice(0, 10).forEach(dep => {
    console.log(`  ‚îÇ   ‚Ä¢ ${dep}`);
  });
  
  if (devDeps.length > 10) {
    console.log(`  ‚îÇ   ... and ${devDeps.length - 10} more`);
  }
  
} catch (error) {
  console.log(`  ‚îÇ   ‚ùå Failed to read package.json: ${error.message}`);
}

console.log('  ‚îî‚îÄ‚îÄ Dependency analysis complete');
console.log('');

// Step 4: Source Code Analysis
console.log(chalk.yellow.bold('üîç Step 4: Source Code Analysis'));
console.log('  ‚îú‚îÄ‚îÄ Scanning source files...');

async function scanDirectory(dir, extensions = ['.ts', '.js']) {
  const files = [];
  
  async function scan(currentDir) {
    const entries = await fs.readdir(currentDir, { withFileTypes: true });
    
    for (const entry of entries) {
      const fullPath = path.join(currentDir, entry.name);
      
      if (entry.isDirectory() && !entry.name.startsWith('.')) {
        await scan(fullPath);
      } else if (entry.isFile() && extensions.some(ext => entry.name.endsWith(ext))) {
        files.push(fullPath);
      }
    }
  }
  
  try {
    await scan(dir);
  } catch (error) {
    console.log(`  ‚îÇ   ‚ö†Ô∏è  Could not scan ${dir}: ${error.message}`);
  }
  
  return files;
}

const sourceFiles = await scanDirectory('src');
const testFiles = await scanDirectory('tests');

console.log(`  ‚îÇ   ‚úì Found ${sourceFiles.length} source files`);
console.log(`  ‚îÇ   ‚úì Found ${testFiles.length} test files`);

// Analyze file sizes
let totalSize = 0;
for (const file of sourceFiles) {
  try {
    const stats = await fs.stat(file);
    totalSize += stats.size;
    console.log(`  ‚îÇ   üìÑ ${file}: ${(stats.size / 1024).toFixed(2)} KB`);
  } catch (error) {
    console.log(`  ‚îÇ   ‚ùå Could not stat ${file}: ${error.message}`);
  }
}

console.log(`  ‚îÇ   ‚úì Total source code size: ${(totalSize / 1024).toFixed(2)} KB`);
console.log('  ‚îî‚îÄ‚îÄ Source analysis complete');
console.log('');

// Step 5: TypeScript Compilation (This will fail)
console.log(chalk.yellow.bold('‚ö° Step 5: TypeScript Compilation'));
console.log('  ‚îú‚îÄ‚îÄ Creating output directory...');
await fs.ensureDir(config.outDir);
console.log('  ‚îÇ   ‚úì Output directory ready');

console.log('  ‚îú‚îÄ‚îÄ Starting TypeScript compilation...');
console.log('  ‚îÇ   Using configuration: tsconfig.json');

// Show TypeScript configuration
try {
  const tsConfig = await fs.readJson('tsconfig.json');
  console.log('  ‚îÇ   TypeScript Config Summary:');
  console.log(`  ‚îÇ   ‚Ä¢ Target: ${tsConfig.compilerOptions.target}`);
  console.log(`  ‚îÇ   ‚Ä¢ Module: ${tsConfig.compilerOptions.module}`);
  console.log(`  ‚îÇ   ‚Ä¢ Strict: ${tsConfig.compilerOptions.strict}`);
  console.log(`  ‚îÇ   ‚Ä¢ Source Maps: ${tsConfig.compilerOptions.sourceMap}`);
} catch (error) {
  console.log('  ‚îÇ   ‚ö†Ô∏è  Could not read tsconfig.json');
}

console.log('  ‚îú‚îÄ‚îÄ Compiling TypeScript files...');

// This will intentionally fail due to TypeScript errors in the code
try {
  const tscOutput = execSync('npx tsc --build --verbose --listFiles', { 
    encoding: 'utf8',
    timeout: 30000 
  });
  
  console.log('  ‚îÇ   TypeScript compilation output:');
  tscOutput.split('\n').forEach(line => {
    if (line.trim()) {
      console.log(`  ‚îÇ   ${line}`);
    }
  });
  
  console.log('  ‚îÇ   ‚úì TypeScript compilation successful');
  
} catch (error) {
  console.log(chalk.red('  ‚îÇ   ‚ùå TypeScript compilation failed!'));
  console.log('  ‚îÇ   Error details:');
  
  const errorOutput = error.stdout || error.stderr || error.message;
  errorOutput.split('\n').forEach(line => {
    if (line.trim()) {
      console.log(chalk.red(`  ‚îÇ   ${line}`));
    }
  });
  
  console.log('');
  console.log(chalk.red.bold('üí• BUILD FAILED: TypeScript Compilation Errors'));
  console.log('');
  console.log(chalk.yellow('Debug Information:'));
  console.log(`  ‚Ä¢ Build started: ${new Date(startTime).toISOString()}`);
  console.log(`  ‚Ä¢ Build duration: ${Date.now() - startTime}ms`);
  console.log(`  ‚Ä¢ Node.js version: ${process.version}`);
  console.log(`  ‚Ä¢ Platform: ${process.platform}`);
  console.log(`  ‚Ä¢ Architecture: ${process.arch}`);
  console.log(`  ‚Ä¢ Memory usage: ${JSON.stringify(process.memoryUsage())}`);
  console.log('');
  
  // Additional file analysis for debugging
  console.log(chalk.yellow('File Analysis:'));
  for (const file of sourceFiles.slice(0, 5)) {
    try {
      const content = await fs.readFile(file, 'utf8');
      const lines = content.split('\n').length;
      console.log(`  ‚Ä¢ ${file}: ${lines} lines`);
    } catch (err) {
      console.log(`  ‚Ä¢ ${file}: Could not read file`);
    }
  }
  
  process.exit(1);
}

// This code will never be reached due to the compilation failure above
console.log('  ‚îî‚îÄ‚îÄ TypeScript compilation complete');
console.log('');

// Step 6: Post-compilation Processing
console.log(chalk.yellow.bold('üîÑ Step 6: Post-compilation Processing'));
console.log('  ‚îú‚îÄ‚îÄ Analyzing generated files...');

const distFiles = await scanDirectory('dist', ['.js', '.d.ts', '.js.map']);
console.log(`  ‚îÇ   ‚úì Generated ${distFiles.length} files`);

console.log('  ‚îú‚îÄ‚îÄ Setting executable permissions...');
try {
  await fs.chmod(path.join('dist', 'cli.js'), '755');
  console.log('  ‚îÇ   ‚úì Set executable permission on cli.js');
} catch (error) {
  console.log(`  ‚îÇ   ‚ö†Ô∏è  Could not set permissions: ${error.message}`);
}

console.log('  ‚îî‚îÄ‚îÄ Post-processing complete');
console.log('');

// Step 7: Final Build Summary
const endTime = Date.now();
const buildDuration = endTime - startTime;

console.log(chalk.green.bold('‚úÖ Build Process Complete'));
console.log(chalk.gray('=' .repeat(60)));
console.log(chalk.green(`Total build time: ${buildDuration}ms`));
console.log(chalk.green(`Output directory: ${config.outDir}/`));
console.log(chalk.green(`Generated files: ${distFiles.length}`));

const finalMemUsage = process.memoryUsage();
console.log(chalk.blue('Memory Usage:'));
console.log(`  ‚Ä¢ Heap Used: ${(finalMemUsage.heapUsed / 1024 / 1024).toFixed(2)} MB`);
console.log(`  ‚Ä¢ Heap Total: ${(finalMemUsage.heapTotal / 1024 / 1024).toFixed(2)} MB`);
console.log(`  ‚Ä¢ External: ${(finalMemUsage.external / 1024 / 1024).toFixed(2)} MB`);

console.log('');
console.log(chalk.cyan.bold('üéâ Build completed successfully!'));